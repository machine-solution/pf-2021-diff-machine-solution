----------------------------SUCCESS------------------------------------------------------------------------------------
@ a 1 @
> /// <summary> Корень иерархии классов ботов </summary>
@ d 1-2 @
> using System.Collections.Generic;
> 
@ a 7 @
>     protected const int LEFT = 0, DOWN = 1, RIGHT = 2, UP = 3, NUMOFSIDES = 4;
@ d 8 @
>     protected const int LEFT = 0, DOWN = 1, RIGHT = 2, UP = 3, ARITY = 4;
@ a 19 @
> /// <summary> Бот для режима без телепортов </summary>
@ d 25 @
>         ansSide = sides[rand.Next(ARITY)];
@ a 25 @
>         ansSide = sides[rand.Next(NUMOFSIDES)];
@ d 46-47 @
>     protected int side_to_int(string m) {
>         for (int i = 0; i < ARITY; ++i)
@ a 46-47 @
>     protected int Stoi(string m) {
>         for (int i = 0; i < NUMOFSIDES; ++i)
@ d 54 @
>         for (int i = 0; i < ARITY; ++i)
@ a 54 @
>         for (int i = 0; i < NUMOFSIDES; ++i)
@ a 60 @
>     protected virtual bool HaveArs() => knifes != Check.knifes(my_id) || bullets != Check.bullets(my_id) || armors != Check.armors(my_id) || crackers != Check.crackers(my_id);
@ d 60-62 @
>     protected virtual bool HaveArs() {
>         return knifes != Check.knifes(my_id) || bullets != Check.bullets(my_id) || armors != Check.armors(my_id) || crackers != Check.crackers(my_id);
>     }
@ a 67-68 @
>     protected virtual void BFS() {
>         //init
@ d 69 @
>     protected virtual void NewBFS() {
@ a 73-74 @
> 
>         System.Collections.Generic.Queue<int[]> q = new System.Collections.Generic.Queue<int[]>();
@ d 74-77 @
>     }
>     protected virtual void BFS() {
>         NewBFS();
>         Queue<int[]> q = new Queue<int[]>();
@ a 97 @
>                     if (Have(UNKNOWN, to[0], to[1]) && notExpl_size < 10)
@ d 100 @
>                     if (Have(UNKNOWN, to[0], to[1]) && notExpl_size < 10) 
@ d 114 @
>     protected virtual void NewDFS() => used = new bool[2 * Size, 2 * Size];
@ a 125 @
>                 ansType = "step"; ansSide = sides[rand.Next(NUMOFSIDES)];
@ d 129 @
>                 ansType = "step"; ansSide = sides[rand.Next(ARITY)];
@ a 143 @
>                     : sides[rand.Next(NUMOFSIDES)]);
@ d 147 @
>                     : sides[rand.Next(ARITY)]);
@ a 177 @
>         int[] val = new int[NUMOFSIDES];
@ a 179 @
>         for (int d = 0; d < NUMOFSIDES; ++d)
@ d 181 @
>         int[] val = new int[ARITY];
@ d 183 @
>         for (int d = 0; d < ARITY; ++d)
@ a 188 @
>     protected virtual string Random(int form) => random(form, my_map.x, my_map.y);
@ d 192-194 @
>     protected virtual string Random(int form) {
>         return random(form, my_map.x, my_map.y);
>     }
@ a 208-209 @
>         public Map(int Size) => Init(Size);
>         public Map copy() => new Map(this);
@ d 214-219 @
>         public Map(int Size) {
>             Init(Size);
>         }
>         public Map copy() {
>             return new Map(this);
>         }
@ a 315 @
>         used = new bool[2 * Size, 2 * Size]; //init 
@ d 325 @
>         NewDFS();
@ a 372-373 @
>                         
>                         used = new bool[2 * Size, 2 * Size]; //init
@ d 382 @
>                         NewDFS();
@ a 383 @
> 
@ a 404 @
>             used = new bool[2 * Size, 2 * Size]; //init
@ d 412 @
>             NewDFS();
@ a 421 @
>     protected virtual bool ConflictRes(int res, int side) => Can(my_map.x, my_map.y, side) != res && Can(my_map.x, my_map.y, side) != UNKNOWN;
@ a 424 @
>         used = new bool[2 * Size, 2 * Size]; //init
@ d 429-431 @
>     protected virtual bool ConflictRes(int res, int side) {
>         return Can(my_map.x, my_map.y, side) != res && Can(my_map.x, my_map.y, side) != UNKNOWN;
>     }
@ d 434 @
>         NewDFS();
@ a 468-469 @
>         public int X() => B.x + dspy_x;
>         public int Y() => B.y + dspy_y;
@ d 478-483 @
>         public int X() {
>             return B.x + dspy_x;
>         }
>         public int Y() {
>             return B.y + dspy_y;
>         }
@ a 521 @
>                 int game = GameAns(gameAns_id); k = Stoi(ansSide_id);
@ a 529 @
>                                     used = new bool[2 * Size, 2 * Size]; //init
@ d 535 @
>                 int game = GameAns(gameAns_id); k = side_to_int(ansSide_id);
@ d 543 @
>                                     NewDFS();
@ a 719 @
> /// <summary> Бот для режима без телепортов: version 1.0 </summary>
@ a 725 @
>         ansSide = sides[rand.Next(NUMOFSIDES)];
@ d 738 @
>         ansSide = sides[rand.Next(ARITY)];
@ a 757-763 @
>         //init
>         used = new bool[20, 20];
>         p = new int[20, 20][];
>         path = new int[101][];
>         notExpl_size = path_size = 0;
> 
>         System.Collections.Generic.Queue<int[]> q = new System.Collections.Generic.Queue<int[]>();
@ d 770-771 @
>         NewBFS();
>         Queue<int[]> q = new Queue<int[]>();
@ a 904 @
>                 int game = GameAns(gameAns_id); k = Stoi(ansSide_id);
@ d 905-910 @
>     protected override void NewBFS() {
>         used = new bool[20, 20];
>         p = new int[20, 20][];
>         path = new int[101][];
>         notExpl_size = path_size = 0;
>     }
@ d 918 @
>                 int game = GameAns(gameAns_id); k = side_to_int(ansSide_id);
@ a 952 @
> /// <summary> Бот для режима без телепортов: version 1.5 </summary>
@ a 956 @
> /// <summary> Бот для режима без телепортов: version 1.6 </summary>
@ a 958-965 @
>     protected void BFS(int[,] indspy) {
>         //init
>         used = new bool[2 * Size, 2 * Size]; 
>         p = new int[2 * Size, 2 * Size][];
>         notExpl = new int[11][];
>         notExpl_size = 0;
> 
>         System.Collections.Generic.Queue<int[]> q = new System.Collections.Generic.Queue<int[]>();
@ d 970-972 @
>     protected void BFS(int[,] ind) {
>         NewBFS();
>         Queue<int[]> q = new Queue<int[]>();
@ a 981-982 @
>                     if (indspy[to[0], to[1]] > 0 && notExpl_size < 1)
>                         if (Check.treasures(indspy[to[0], to[1]] - 1) > 0)
@ d 988-989 @
>                     if (ind[to[0], to[1]] > 0 && notExpl_size < 1)
>                         if (Check.treasures(ind[to[0], to[1]] - 1) > 0)
@ a 1065 @
>                 int[,] indspy = new int[2 * Size - 1, 2 * Size - 1];
@ a 1069 @
>                         if (x != my_map.x || y != my_map.y) indspy[x, y] = i + 1;
@ d 1072 @
>                 int[,] posPlayer = new int[2 * Size - 1, 2 * Size - 1];
@ a 1072 @
>                 BFS(indspy);
@ d 1076 @
>                         if (x != my_map.x || y != my_map.y) posPlayer[x, y] = i + 1;
@ d 1079 @
>                 BFS(posPlayer);