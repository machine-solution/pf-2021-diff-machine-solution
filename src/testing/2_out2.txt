----------------------------SUCCESS------------------------------------------------------------------------------------
@ a 22-23 @
>   python hundo.py --fast [--quiet] [--json | --raw] < file_with_names
>   python hundo.py --fast [--quiet] [--json | --raw]
@ a 25 @
>   --fast    Enable fast-mode which requires full name (ФИО).
@ a 35 @
> from hashlib import md5
@ d 69 @
> def future_results(futures):
@ a 73 @
> def future_results(futures, as_json=False):
@ d 77 @
>                 content = future_result.content.decode(errors='ignore')
@ a 81-84 @
>                 if as_json:
>                     content = future_result.json()
>                 else:
>                     content = future_result.content.decode(errors='ignore')
@ d 227 @
>         found_people = seek_people(asked_people)
@ a 227-286 @
> def parse_from_json(s):
>     # that's as an example:
>     # ИТМО, Программная инженерия (09.03.04), ОК [Б], №: 123, №*: 456, №**: 789
>     agreement = False
>     if '<b>' in s:
>         s = s[3: -4]
>         agreement = True
>     spec = s[:s.index('[')]
>     spec = spec[:spec.rindex(',')]
>     comp_type = s[len(spec) + 2:]
>     comp_type = comp_type[:comp_type.index(',')]
>     return spec, comp_type, agreement
> 
> 
> def search_by_hashes(asked_people):
>     class hasher:
>         def __init__(self):
>             self.cache = dict()
> 
>         def __call__(self, s):
>             if s not in self.cache:
>                 self.cache[s] = md5(s.encode()).hexdigest()
>             return self.cache[s]
> 
> 
>     h = hasher()
>     hashes_by_its_starts = defaultdict(list)
>     for name in asked_people:
>         # if it doesn't match Фамилия Имя Отчество
>         if name.count(' ') != 2:
>             log('ignore {:s}: not ФИО'.format(name))
>             continue
>         hashes_by_its_starts[h(name)[: 2]].append(
>             (h(name), name)
>         )
>     json_url = SITE + 'fio/{}.json'
>     futures = []
>     for short_hash in hashes_by_its_starts:
>         url = json_url.format(short_hash)
>         futures.append(session.get(url))
>     result = defaultdict(list)
>     for json, url in future_results(futures, as_json=True):
>         if json is None:
>             continue
>         short_hash = url[: url.rindex('.json')][-2:]
>         for h, name in hashes_by_its_starts[short_hash]:
>             if h not in json:
>                 continue
>             for _, string in json[h]:
>                 spec, comp_type, agreement = parse_from_json(string)
>                 result[name].append(
>                     {
>                         'spec': spec,
>                         'type': comp_type,
>                         'agreement': agreement
>                     }
>                 )
>     return result
> 
> 
@ a 294-297 @
>         if '--fast' in argv:
>             found_people = search_by_hashes(asked_people)
>         else:
>             found_people = seek_people(asked_people)