----------------------------SUCCESS------------------------------------------------------------------------------------
@ a 4-11 @
> class DiffLineBlock(var add: Boolean, val first: Int = 0, val last: Int = 0,
>                     val strings: List<String> = List(1){""} ): Comparable<DiffLineBlock> {
>     override fun compareTo(other: DiffLineBlock): Int = if (this.first == other.first)
>         this.last.compareTo(other.last)
>     else
>         first.compareTo(other.first)
> }
> 
@ d 48-53 @
> class DiffLine(private val number: Int = 0, val string: String = "") :Comparable<DiffLine> {
>     override fun compareTo(other: DiffLine): Int = this.number.compareTo(other.number)
>     override fun toString(): String = this.string
> }
> 
> fun diff(sequence1: Array<String>, sequence2: Array<String>): Array<DiffLine> {
@ d 55 @
>     val answer : Array<DiffLine> = Array(sequence1.size + sequence2.size - 2 * subsequence.size){DiffLine()}
@ a 56 @
> fun diff(sequence1: Array<String>, sequence2: Array<String>): List<DiffLineBlock> {
@ d 58 @
>     var itAns = 0
@ a 58-59 @
>     val answer : MutableList<DiffLineBlock> = mutableListOf()
> 
@ d 62-63 @
>         while (it1 < sequence1.size && sequence1[it1] != subsequence[itSub]) {
>             answer[itAns++] = DiffLine(it1+1,"${it1 + 1}\t\t-| " + sequence1[it1++])
@ a 65-72 @
>         if (it1 < sequence1.size && sequence1[it1] != subsequence[itSub]) {
>             val strings = MutableList(0){""}
>             val first = it1 + 1
>             while (it1 < sequence1.size && sequence1[it1] != subsequence[itSub]) {
>                strings.add("${it1 + 1}\t\t-| " + sequence1[it1++])
>             }
>             val last = it1
>             answer.add(DiffLineBlock(false,first,last,strings))
@ d 67-68 @
>         while (it2 < sequence2.size && sequence2[it2] != subsequence[itSub]) {
>             answer[itAns++] = DiffLine(it2+1,"${it2 + 1}\t\t+| " + sequence2[it2++])
@ d 73 @
>     answer.sort()
@ d 75-76 @
>     return answer
> }
@ a 76-83 @
>         if (it2 < sequence2.size && sequence2[it2] != subsequence[itSub]) {
>             val strings = MutableList(0){""}
>             val first = it2 + 1
>             while (it2 < sequence2.size && sequence2[it2] != subsequence[itSub]) {
>                 strings.add("${it2 + 1}\t\t+| " + sequence2[it2++])
>             }
>             val last = it2
>             answer.add(DiffLineBlock(true,first,last,strings))
@ d 78-81 @
> fun diffLinesToStrings(diffLines: Array<DiffLine>): Array<String> {
>     val strings = Array(diffLines.size){""}
>     for (it in diffLines.indices)
>         strings[it] = diffLines[it].string
@ d 83 @
>     return strings
@ a 88-96 @
>     if (it1 < sequence1.size) {
>         val strings = MutableList(0){""}
>         val first = it1 + 1
>         while (it1 < sequence1.size) {
>             strings.add("${it1 + 1}\t\t-| " + sequence1[it1++])
>         }
>         val last = it1
>         answer.add(DiffLineBlock(true,first,last,strings))
>     }
@ d 98 @
> fun writeFileLines(filename: String, lines: Array<String>) {
@ a 98-106 @
>     if (it2 < sequence2.size) {
>         val strings = MutableList(0){""}
>         val first = it2 + 1
>         while (it2 < sequence2.size) {
>             strings.add("${it2 + 1}\t\t-| " + sequence2[it2++])
>         }
>         val last = it2
>         answer.add(DiffLineBlock(false,first,last,strings))
>     }
@ d 104-105 @
>     for (it in lines.indices)
>         file.appendText('\n' + lines[it])
@ a 108 @
>     answer.sort()
@ a 110 @
>     return answer
@ d 115 @
>     writeFileLines("result.txt", diffLinesToStrings(diff(old,new)))
@ a 125-134 @
> fun writeFileLines(filename: String, lines: List<DiffLineBlock>) {
>     fun writeDiffLineBlock(filename: String, block: DiffLineBlock) {
>         val file = File(filename)
>         if (block.add)
>             file.appendText('\n' + "\t\t@ a ${block.first}-${block.last} @")
>         else
>             file.appendText('\n' + "\t\t@ d ${block.first}-${block.last} @")
>         for (str in block.strings)
>             file.appendText('\n' + str)
>     }
@ a 140-141 @
>     for (block in lines)
>         writeDiffLineBlock(filename, block)
@ a 151 @
>     writeFileLines("result.txt", diff(old,new))