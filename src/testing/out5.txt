----------------------------SUCCESS------------------------------------------------------------------------------------
@ a 1 @
> import java.io.File
@ d 48-52 @
>     val subsequence: Array<String> = longestCommonSubsequence(sequence1, sequence2);
>     val answer = Array<String>(sequence1.size + sequence2.size - subsequence.size){""}
>     var it1: Int = 0
>     var it2: Int = 0
>     var itAns: Int = 0
@ a 49-53 @
>     val subsequence: Array<String> = longestCommonSubsequence(sequence1, sequence2)
>     val answer = Array(sequence1.size + sequence2.size - 2 * subsequence.size){""}
>     var it1 = 0
>     var it2 = 0
>     var itAns = 0
@ d 57 @
>             answer[itAns++] = "-| " + sequence1[it1++]
@ a 58 @
>             answer[itAns++] = "${it1 + 1}-| " + sequence1[it1++]
@ d 62 @
>             answer[itAns++] = "+| " + sequence2[it2++]
@ a 63 @
>             answer[itAns++] = "${it2 + 1}+| " + sequence2[it2++]
@ d 66 @
>         answer[itAns++] = ".| " + subsequence[itSub]
@ d 72-75 @
> fun main(args: Array<String>) {
> //   val diff: Array<String> = diff(arrayOf("(a + b)^2", " = ", "a^2 + b^2", "+ 2ab"), arrayOf("(a + b)^2 = ", "a^2", "+ b^2", "+ 2ab"))
> //    for (it in diff.indices)
> //        println(diff[it])
@ a 72-81 @
> fun readFileLines(filename: String): Array<String> {
>     fun readList(filename: String): List<String> {
>         return File(filename).readLines()
>     }
>     val list: List<String> =readList(filename)
>     val answer = Array(list.size){""}
>     for (it in answer.indices)
>         answer[it] = list[it]
> 
>     return answer
@ a 83-100 @
> 
> fun writeFileLines(filename: String, lines: Array<String>) {
>     val file = File(filename)
>     if (!file.exists()) {
>         file.createNewFile()
>     }
>     file.writeText("----------------------------SUCCESS----------------------------")
>     for (it in lines.indices)
>         file.appendText('\n' + lines[it])
> }
> 
> fun main() {
>     val old = readFileLines("old.txt")
>     val new = readFileLines("new.txt")
>     println("Do not open a file \"result.txt\" while a program is running")
>     writeFileLines("result.txt", diff(old,new))
>     println("You may open a file \"result.txt\" :)")
> }